@import "../base/components"; // brings in size map + mixins

// Helpers: one place to apply size-specific values
@mixin popup-size($size: md) {
  // container padding & inset (used by the divider)
  padding-inline: sz($size, pad-inline);
  // padding-block: sz($size, pad-block);
  --popup-inset-inline: #{sz($size, pad-inline)};

  // header/body/footer paddings
  .popup-header,
  .popup-footer {
    padding-inline: sz($size, pad-inline);
    padding-block: sz(lg, pad-block);
  }
  .popup-body {
    padding: sz($size, pad-inline);
    padding-top: 0; // symmetric feels good for content
  }

  // border radius & thickness harmonized with size
  @include component-border(xl);
  @include component-font($size);
}

maxterdev-popup {
  display: block;

  /* ===== Overlay ===== */
  .popup-overlay {
    position: fixed;
    inset: 0;
    z-index: var(--z-overlay, 1100);
    background-color: rgba(0, 0, 0, 0.35);

    display: flex;
    align-items: center;
    justify-content: center;

    @include state-transitions();
    @include reduce-motion();
  }

  /* ===== Container ===== */
  .popup-container {
    @include component-base();
    @include elevation(2);
    @include state-transitions(); // bg, border, shadow, transform, etc.
    @include focus-ring();

    // base visuals from tokens
    background-color: var(--color-surface-1, var(--color-background));
    color: var(--on-surface, #202020);
    border-color: var(--color-border-primary, #dfdfdf);

    // sizing defaults (md) + allow responsive max-width
    @include popup-size(md);
    max-width: min(90vw, 720px);
    width: max-content; // shrink-wrap to content (up to max-width)
    min-width: 320px;

    display: flex;
    flex-direction: column;

    // subtle entry motion (scale/translate), respects reduce-motion
    transform: translateY(2px) scale(0.995);
    &[data-state="enter"] {
      transform: translateY(0) scale(1);
    }
  }

  /* Size modifiers (opt-in via host class) */
  &.is-sm .popup-container {
    @include popup-size(sm);
    max-width: min(92vw, 560px);
  }
  &.is-lg .popup-container {
    @include popup-size(lg);
    max-width: min(92vw, 960px);
  }

  /* Elevation modifiers (optional) */
  &.elev-0 .popup-container {
    @include elevation(0);
  }
  &.elev-3 .popup-container {
    @include elevation(3);
  }

  /* Sections */
  .popup-header,
  .popup-body,
  .popup-footer {
    @include component-base();
    width: 100%;
  }

  .popup-header {
    @include component-font(md, var(--fw-semibold, 600));
    // spacing comes from popup-size()
  }

  .popup-body {
    @include component-font(); // uses current size from popup-size()
    position: relative;
  }

  // Full-bleed divider that ignores inner paddings
  .popup-header + .popup-body::before {
    content: "";
    position: absolute;
    top: 0;
    left: calc(-1 * var(--popup-inset-inline, 0.75rem));
    right: calc(-1 * var(--popup-inset-inline, 0.75rem));
    height: 1px;
    background: var(--color-input-border, #dfdfdf);
    pointer-events: none;
  }

  .popup-footer {
    display: flex;
    justify-content: flex-end;
    gap: var(--space-2, 0.5rem);
    // spacing comes from popup-size()
  }

  /* Interactive affordances when the container itself is clickable */
  .popup-container[role="dialog"] {
    @include interactive();
  }

  /* Mobile friendliness */
  @media (max-width: 480px) {
    .popup-container {
      max-width: 96vw;
      min-width: unset;
    }
  }
}
